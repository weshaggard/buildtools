<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="12.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <UsingTask TaskName="ResolveNuGetPackages" AssemblyFile="$(ToolsDir)Microsoft.DotNet.Build.Tasks.dll"/>
  <UsingTask TaskName="ResolveNuGetPackageAssets" AssemblyFile="$(ToolsDir)Microsoft.DotNet.Build.Tasks.dll"/>

  <PropertyGroup>
    <ProjectPackagesConfigFile Condition="'$(ProjectPackagesConfigFile)'=='' and Exists('$(MSBuildProjectDirectory)/packages.config')">$(MSBuildProjectDirectory)/packages.config</ProjectPackagesConfigFile>
    <ProjectJson Condition="'$(ProjectJson)'=='' and Exists('$(MSBuildProjectDirectory)/project.json')">$(MSBuildProjectDirectory)/project.json</ProjectJson>

    <RestorePackages Condition="'$(RestorePackages)'!='false' and (Exists('$(ProjectPackagesConfigFile)') or Exists('$(ProjectJson)'))">true</RestorePackages>
    <ResolveNuGetPackages Condition="'$(ResolveNuGetPackages)'!='false' and (Exists('$(ProjectPackagesConfigFile)') or Exists('$(ProjectJson)'))">true</ResolveNuGetPackages>

    <RestorePackagesSemaphore Condition="Exists('$(ProjectPackagesConfigFile)')">$(PackagesDir)$(MSBuildProjectFile)-packages.config</RestorePackagesSemaphore>
    <RestoreProjectJsonSemaphore Condition="Exists('$(ProjectJson)')">$(PackagesDir)$(MSBuildProjectFile)-project.json</RestoreProjectJsonSemaphore>
  </PropertyGroup>

  <Target Name="RestorePackages" 
          BeforeTargets="ResolveNuGetPackages"
          Inputs="$(ProjectPackagesConfigFile);$(ProjectJson)"
          Outputs="$(RestorePackagesSemaphore);$(RestoreProjectJsonSemaphore)"
          Condition="'$(RestorePackages)'=='true'">

    <Error Condition="'$(NugetRestoreCommand)'=='' and Exists('$(ProjectPackagesConfigFile)')" Text="RestorePackages target needs a predefined NugetRestoreCommand property set in order to restore $(ProjectPackagesConfigFile)" /> 
    <Error Condition="'$(DnuRestoreCommand)'=='' and Exists('$(ProjectJson)')" Text="RestorePackages target needs a predefined DnuRestoreCommand property set in order to restore $(ProjectJson)" /> 
    
    <Exec Condition="Exists('$(ProjectPackagesConfigFile)')" Command="$(NugetRestoreCommand) &quot;$(ProjectPackagesConfigFile)&quot;" StandardOutputImportance="Low" />
    <Exec Condition="Exists('$(ProjectJson)')" Command="$(DnuRestoreCommand) &quot;$(ProjectJson)&quot;" StandardOutputImportance="Low" CustomErrorRegularExpression="^Unable to locate .*" />

    <Copy Condition="Exists('$(ProjectPackagesConfigFile)')" SourceFiles="$(ProjectPackagesConfigFile)" DestinationFiles="$(RestorePackagesSemaphore)" ContinueOnError="true" SkipUnchangedFiles="true" />
    <Copy Condition="Exists('$(ProjectJson)')" SourceFiles="$(ProjectJson)" DestinationFiles="$(RestoreProjectJsonSemaphore)" ContinueOnError="true" SkipUnchangedFiles="true" />
  </Target>

  <ItemGroup Condition="'$(ResolvePackages)'=='true' or '$(ResolveNuGetPackages)'=='true'">
    <CustomAdditionalCompileInputs Condition="Exists('$(ProjectPackagesConfigFile)')" Include="$(ProjectPackagesConfigFile)" />
    <CustomAdditionalCompileInputs Condition="Exists('$(ProjectJson)')" Include="$(ProjectJson)" />
  </ItemGroup>

  <PropertyGroup>
    <ResolveAssemblyReferencesDependsOn>
      $(ResolveAssemblyReferencesDependsOn);
      ResolveNuGetPackages;
    </ResolveAssemblyReferencesDependsOn>
    <NugetTargetFrameworkMoniker Condition="'$(NugetTargetFrameworkMoniker)' == ''">$(TargetFrameworkMoniker)</NugetTargetFrameworkMoniker>
  </PropertyGroup>

  <Target Name="ResolveNuGetPackages" 
          Condition="'$(ResolveNuGetPackages)'=='true'">

    <!-- Use old task for packages.config -->
    <ResolveNuGetPackages Condition="'$(ProjectPackagesConfigFile)' != ''"
                          PackagesConfigs="$(ProjectPackagesConfigFile)"
                          PackageRoot="$(PackagesDir)"
                          Platform="$(PlatformTarget)"
                          Configuration="$(Configuration)"
                          Language="$(Language)"
                          TargetFramework="$(NugetTargetFrameworkMoniker)"
                          TargetPlatformMoniker="$(TargetPlatformMoniker)">

      <Output TaskParameter="ResolvedAnalyzers" ItemName="Analyzer" />
      <Output TaskParameter="ResolvedReferences" ItemName="Reference" />
      <Output TaskParameter="ResolvedCopyLocal" ItemName="None" />
    </ResolveNuGetPackages>

    <PropertyGroup>
      <!-- Temporary workaround -->
      <NugetTargetFrameworkMoniker Condition="'$(NugetTargetFrameworkMoniker)' == '.NETPortable,Version=v4.5,Profile=Profile7'">DNXCore,Version=v5.0</NugetTargetFrameworkMoniker>
    </PropertyGroup>
    
    <!-- Use new task for project.json -->
    <ResolveNuGetPackageAssets Condition="'$(ProjectJson)' != ''"
                               Architecture="$(PlatformTarget)"
                               Configuration="$(Configuration)"
                               Language="$(Language)"
                               IngoreLockFile="$(NuGetIngoreLockFile)"
                               PackageRoot="$(PackagesDir)"
                               ProjectFile="$(MSBuildProjectFullPath)"
                               TargetFrameworkMonikers="$(NugetTargetFrameworkMoniker)"
                               TargetPlatformMonikers="$(TargetPlatformMoniker)"
                               TransitiveProjectReferences="">
      <Output TaskParameter="ResolvedAnalyzers" ItemName="Analyzer" />
      <Output TaskParameter="ResolvedReferences" ItemName="Reference" />
      <Output TaskParameter="ResolvedCopyLocalItems" ItemName="None" />
    </ResolveNuGetPackageAssets>

    <!-- We may have an indirect package reference that we want to replace with a project reference -->
    <ItemGroup>
      <!-- Convert to filenames so that we can intersect -->
      <_ProjectReferenceFilenames Include="@(_ResolvedProjectReferencePaths->'%(FileName)%(Extension)')">
        <OriginalIdentity>%(Identity)</OriginalIdentity>
      </_ProjectReferenceFilenames>

      <_ReferencesFileNames Include="@(Reference->'%(FileName)%(Extension)')">
        <OriginalIdentity>%(Identity)</OriginalIdentity>
      </_ReferencesFileNames>

      <_NoneFileNames Include="@(None->'%(FileName)%(Extension)')">
        <OriginalIdentity>%(Identity)</OriginalIdentity>
      </_NoneFileNames>
      
      <!-- Intersect project-refs with package-refs -->
      <_ReferenceFileNamesToRemove Include="@(_ReferencesFileNames->'%(OriginalIdentity)')" Condition="'@(_ProjectReferenceFilenames)' == '@(_ReferencesFileNames)' and '%(Identity)' != ''"/>
      <_NoneFileNamesToRemove Include="@(_NoneFileNames->'%(OriginalIdentity)')" Condition="'@(_ProjectReferenceFilenames)' == '@(_NoneFileNames)' and '%(Identity)' != ''"/>

      <Reference Remove="@(_ReferenceFileNamesToRemove)" />
      <None Remove="@(_NoneFileNamesToRemove)"/>
    </ItemGroup>
    
    <Message Text="Excluding @(_ReferenceFileNamesToRemove);@(_NoneFileNamesToRemove) from package references since the same file is provided by a project refrence."
             Condition="'@(_ReferenceFileNamesToRemove)' != '' or '@(_NoneFileNamesToRemove)' != ''"/>
  </Target>

</Project>