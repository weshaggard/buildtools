<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="12.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup>
    <!-- A number of the imports below depend on these default properties -->
    <IsTestProject Condition="'$(IsTestProject)'=='' And $(MSBuildProjectName.EndsWith('.Tests'))">true</IsTestProject>

    <AssemblyVersion Condition="'$(AssemblyVersion)'==''">999.999.999.999</AssemblyVersion>
    <CLSCompliant Condition="'$(CLSCompliant)'=='' and '$(IsTestProject)'=='true'">false</CLSCompliant>
    <CLSCompliant Condition="'$(CLSCompliant)'==''">true</CLSCompliant>
  </PropertyGroup>
  
  <!-- 
    Import the default target framework targets.
    
    Inputs:
      TargetFrameworkIdentifier - If not set defaults to .NETPortable
      TargetFrameworkVersion - If not set defaults to v4.5
      TargetFrameworkProfile - If not set defaults to Profile7
    
    This Imports portable.csharp/visualbasic.targets if .NETPortable is the identifier otherwise it imports csharp/visualbasic.targets  
  -->
  <Import Project="$(MSBuildThisFileDirectory)FrameworkTargeting.targets" Condition="'$(ExcludeFrameworkTargetingImport)'!='true'" />
  
  <!-- 
    Import the default package restore and resolve targets 
  
      Inputs:
        ProjectJson - If not set defaults to $(MSBuildProjectDirectory)\project.json
        ProjectPackagesConfigFile - If not set defaults to $(MSBuildProjectDirectory)\packages.config
        RestorePackages - If not set defaults to the existence of the file $(ProjectPackagesConfigFile) or $(ProjectJson)
        ResolveNuGetPackages - If not set defaults to to the existence of the file $(ProjectPackagesConfigFile) or $(ProjectJson)
      
      Depends on properties:
        NugetRestoreCommand - Used to restore the project packages from packages.config
        DnuRestoreCommand - Used to restore the project packages from project.json
        PackagesDir - Packages are restored to and resolved from this location

      Depends on properties set by csharp/visualbasic.targets so needs to be imported after.
  -->
  <Import Project="$(MSBuildThisFileDirectory)packageresolve.targets" Condition="'$(ExcludePackageResolveImport)'!='true'" />

  <!-- 
    Import the default SR resource generation targets 
  
      Inputs:
        ResourcesSourceOutputDirectory - If not set defaults to $(MSBuildProjectDirectory)\Resources.
        StringResourcesPath - If not set defaults to $(ResourcesSourceOutputDirectory\Strings.resx if it exists. If the file exists
          then the targets generates the strongly typed $(ResourcesSourceOutputDirectory)\SR.cs/vb file based on resource strings.  
  -->
  <Import Project="$(MSBuildThisFileDirectory)resources.targets" Condition="'$(ExcludeResourcesImport)'!='true'" />

  <!-- 
    Import the default assembly info generation targets
    
      Inputs:
        GenerateAssemblyInfo - Controls whether or not to generate the assembly info file and defaults to true if not set.
        AssemblyVersion - If not set defaults to 1.0.0.0 but it is expected to be set in csproj files.
        CLSCompliant - If not set defaults to true and if it is true then adds the assembly level CLSCompliant(true) attribute.

      File Version Inputs:
        MajorVersion - If not set defaults to 1.
        MinorVersion - If not set defaults to 0.
        BuildNumberMajor - If not set defaults to 0.
        BuildNumberMinor - If not set defaults to 0. 
        AssemblyFileVersion - If not set defaults to $(MajorVersion).$(MinorVersion).$(BuildNumberMajor).$(BuildNumberMinor). 
        
      BuildNumberTarget - If this property is set it will try to import the file which allows for it to override the properties above.
  -->
  <Import Project="$(MSBuildThisFileDirectory)versioning.targets" Condition="'$(ExcludeVersioningImport)'!='true'" />

  <!-- 
    Import the default signing targets which will setup the authenticode properties and do OpenSourceSigning
    
    Inputs:
      SkipSigning - For projects that want to opt-out of strong name signing the can set this to true.    
  -->
  <Import Project="$(MSBuildThisFileDirectory)sign.targets" Condition="'$(ExcludeSigningImport)'!='true'" />

  <!-- 
    Import the tests.targets which controls the publishing and running of the tests, including code coverage options.
      
      Inputs:
        RunTestsForProject - Usually set at the project level to disable the tests for a single project.
        CoverageEnabledForProject - Usually set at the project level to disable code coverage for a single project. 
        SkipTests - Usually set at the root level for builds that want to disable all the tests.
        ProjectJson - If not set defaults to $(MSBuildProjectDirectory)\project.json
        ProjectPackagesConfigFile - Test publishing depends on this to be able to copy the dependencies to the test output
        CopyTestToTestDirectory - If not set defaults to $(IsTestProject)

      Depends on Properties:
        TestPath - Controls the root path from where the test assets are published and run from.
        NugetRestoreCommand - Used to restore the test runtime package
        DnuRestoreCommand - Used to restore the project packages from project.json
        PackagesDir - Packages are restored to and resolved from this location    
   -->
  <Import Project="$(MSBuildThisFileDirectory)tests.targets" Condition="'$(IsTestProject)'=='true' and '$(ExcldueTestsImport)'!='true'"/> 

</Project>
